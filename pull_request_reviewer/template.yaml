AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API to handle GitHub webhook events

Parameters:
  PineconeSecretArn:
    Type: String
  PineconeConnectionString:
    Type: String
  Stage:
    Type: String
    Default: Dev
    AllowedValues: [Dev, Stage, Prod]
  BedrockFoundationModelArn:
    Type: String
    Default: arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
  BedrockFoundationModelName:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0

Mappings:
  SecretsManagerExtensionMap:
    us-east-1:
      Arn: arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:11

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage

  GithubApiToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-github-api-token"

  GithubWebhookSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-github-webhook-secret"
      GenerateSecretString:
        PasswordLength: 32

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-queue"
      VisibilityTimeout: 120
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-dead-letter-queue"

  # Couldn't use a custom authorizer for this, as API GW doesn't pass the body
  # of the request to the Lambda function. GitHub signatures require this to be
  # calculated and compared.
  AuthAndQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./auth_and_queue
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 10
      MemorySize: 256
      Architectures:
        - arm64
      Events:
        Api:
          Type: Api
          Properties:
            Path: /handle-event
            Method: POST
            RestApiId: !Ref Api
      Layers:
        - !FindInMap [SecretsManagerExtensionMap, !Ref AWS::Region, Arn]
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt Queue.QueueName
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref GithubWebhookSecret
      Environment:
        Variables:
          GITHUB_WEBHOOK_SECRET_ARN: !Ref GithubWebhookSecret
          QUEUE_URL: !Ref Queue

  EventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./event_handler_function
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 60
      Layers:
        - !FindInMap [SecretsManagerExtensionMap, !Ref AWS::Region, Arn]
        - !Sub "arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:69"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeAgent
              Resource: !GetAtt BedrockAgentAlias.AgentAliasArn
            - Effect: Allow
              Action:
                - bedrock:Retrieve
                - bedrock:RetrieveAndGenerate
              Resource: !GetAtt KnowledgeBasePinecone.KnowledgeBaseArn
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Ref BedrockFoundationModelArn
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref GithubApiToken
      Environment:
        Variables:
          GITHUB_API_TOKEN_SECRET_ARN: !Ref GithubApiToken
          BEDROCK_FM_ARN: !Ref BedrockFoundationModelArn
          BEDROCK_AGENT_ALIAS_ID: !GetAtt BedrockAgentAlias.AgentAliasId
          BEDROCK_AGENT_ID: !GetAtt BedrockAgent.AgentId
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 1
      Architectures:
        - arm64

  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonBedrockExecutionRoleForAgents-finops-demo
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                AWS:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
      Policies:
        - PolicyName: BedrockInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Ref BedrockFoundationModelArn
        - PolicyName: KnowledgeBaseAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:Retrieve
                  - bedrock:RetrieveAndGenerate
                Resource:
                  - !GetAtt KnowledgeBasePinecone.KnowledgeBaseArn

  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentAliasName: !Sub ${AWS::StackName}-agent-alias
      AgentId: !Ref BedrockAgent

  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub ${AWS::StackName}-agent
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockFoundationModelName
      Instruction: >
        You are an automated assistant that serves to provide developers with 
        useful guidance around whether their proposed change to AWS infrastructure 
        is cost effective. You are provided with a proposed change in a 
        structured format and you must make a judgement on whether it is in 
        accordance with cost optimisation best practices. You may also provide 
        recommendations on how to improve the proposed change.
      IdleSessionTTLInSeconds: 60
      KnowledgeBases:
        - KnowledgeBaseId: !Ref KnowledgeBasePinecone
          Description: Knowledge base linked to Pinecone
          KnowledgeBaseState: ENABLED

  KnowledgeBaseBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  KnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                AWS:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*
      Policies:
        - PolicyName: BedrockInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1
        - PolicyName: SecretAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref PineconeSecretArn
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !GetAtt KnowledgeBaseBucket.Arn
                  - !Sub "${KnowledgeBaseBucket.Arn}/*"

  KnowledgeBasePinecone:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Sub "${AWS::StackName}-kb-pinecone"
      Description: "Knowledge base for Pinecone"
      RoleArn: !GetAtt KnowledgeBaseRole.Arn
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1"
      StorageConfiguration:
        Type: "PINECONE"
        PineconeConfiguration:
          ConnectionString: !Ref PineconeConnectionString
          CredentialsSecretArn: !Ref PineconeSecretArn
          Namespace: !Ref AWS::StackName
          FieldMapping:
            TextField: "text"
            MetadataField: "metadata"

  KnoweldgeBaseDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBasePinecone
      Name: !Sub "${AWS::StackName}-data-source"
      Description: "Data source for Pinecone"
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: !GetAtt KnowledgeBaseBucket.Arn

Outputs:
  ServerlessApiUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
